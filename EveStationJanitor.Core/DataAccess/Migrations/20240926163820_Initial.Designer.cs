// <auto-generated />
using EveStationJanitor.Core.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EveStationJanitor.Core.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240926163820_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.EntityTag", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("tag");

                    b.HasKey("Key")
                        .HasName("pk_entity_tags");

                    b.ToTable("EntityTags", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_item_categories");

                    b.ToTable("ItemCategories", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_item_groups");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_item_groups_category_id");

                    b.ToTable("ItemGroups", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("group_id");

                    b.Property<float>("Mass")
                        .HasColumnType("REAL")
                        .HasColumnName("mass");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("PortionSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("portion_size");

                    b.Property<float>("Volume")
                        .HasColumnType("REAL")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_item_types");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_item_types_group_id");

                    b.ToTable("ItemTypes", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemTypeMaterial", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("item_type_id");

                    b.Property<int>("MaterialItemTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("material_item_type_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("ItemTypeId", "MaterialItemTypeId")
                        .HasName("pk_item_type_materials");

                    b.HasIndex("MaterialItemTypeId")
                        .HasDatabaseName("ix_item_type_materials_material_item_type_id");

                    b.ToTable("ItemTypeMaterials", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MapRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_map_regions");

                    b.ToTable("MapRegions", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MapSolarSystem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_map_solar_systems");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_map_solar_systems_region_id");

                    b.ToTable("MapSolarSystems", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MarketOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration");

                    b.Property<bool>("IsBuyOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_buy_order");

                    b.Property<string>("Issued")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("issued");

                    b.Property<long>("LocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("location_id");

                    b.Property<int>("MinVolume")
                        .HasColumnType("INTEGER")
                        .HasColumnName("min_volume");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER")
                        .HasColumnName("range");

                    b.Property<int>("SystemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("system_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.Property<int>("VolumeRemaining")
                        .HasColumnType("INTEGER")
                        .HasColumnName("volume_remaining");

                    b.Property<int>("VolumeTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("volume_total");

                    b.HasKey("OrderId")
                        .HasName("pk_market_orders");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_market_orders_location_id");

                    b.HasIndex("SystemId")
                        .HasDatabaseName("ix_market_orders_system_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_market_orders_type_id");

                    b.ToTable("MarketOrders", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.Station", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("OwnerCorporationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("owner_corporation_id");

                    b.Property<double>("ReprocessingEfficiency")
                        .HasColumnType("REAL")
                        .HasColumnName("reprocessing_efficiency");

                    b.Property<double>("ReprocessingTax")
                        .HasColumnType("REAL")
                        .HasColumnName("reprocessing_tax");

                    b.Property<int>("SolarSystemId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("solar_system_id");

                    b.HasKey("Id")
                        .HasName("pk_stations");

                    b.HasIndex("SolarSystemId")
                        .HasDatabaseName("ix_stations_solar_system_id");

                    b.ToTable("Stations", (string)null);
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemGroup", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_groups_item_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemType", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.ItemGroup", "Group")
                        .WithMany("ItemTypes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_types_item_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemTypeMaterial", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.ItemType", "ItemType")
                        .WithMany("Materials")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_type_materials_item_types_item_type_id");

                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.ItemType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_type_materials_item_types_material_item_type_id");

                    b.Navigation("ItemType");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MapSolarSystem", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.MapRegion", "Region")
                        .WithMany("Systems")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_solar_systems_map_regions_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MarketOrder", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_market_orders_stations_location_id");

                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.MapSolarSystem", "SolarSystem")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_market_orders_map_solar_systems_system_id");

                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_market_orders_item_types_type_id");

                    b.Navigation("ItemType");

                    b.Navigation("SolarSystem");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.Station", b =>
                {
                    b.HasOne("EveStationJanitor.Core.DataAccess.Entities.MapSolarSystem", "SolarSystem")
                        .WithMany("Stations")
                        .HasForeignKey("SolarSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_map_solar_systems_solar_system_id");

                    b.Navigation("SolarSystem");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemGroup", b =>
                {
                    b.Navigation("ItemTypes");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.ItemType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MapRegion", b =>
                {
                    b.Navigation("Systems");
                });

            modelBuilder.Entity("EveStationJanitor.Core.DataAccess.Entities.MapSolarSystem", b =>
                {
                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
